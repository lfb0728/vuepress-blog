(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{371:function(t,v,_){"use strict";_.r(v);var e=_(42),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git-操作命令合集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-操作命令合集"}},[t._v("#")]),t._v(" Git 操作命令合集")]),t._v(" "),_("p",[t._v("[TOC]")]),t._v(" "),_("h2",{attrs:{id:"创建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),_("p",[_("code",[t._v("git clone 仓库地址")]),t._v(" \t克隆仓库")]),t._v(" "),_("p",[_("code",[t._v("git init")]),t._v(" \t创建新的版本库")]),t._v(" "),_("h2",{attrs:{id:"本地改变"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地改变"}},[t._v("#")]),t._v(" 本地改变")]),t._v(" "),_("p",[_("code",[t._v("git status")]),t._v("\t查看版本库状态")]),t._v(" "),_("p",[_("code",[t._v("git diff")]),t._v("\t查看跟踪文件的更改")]),t._v(" "),_("p",[_("code",[t._v("git add .")]),t._v("\t添加当前所有更改到暂存库")]),t._v(" "),_("p",[_("code",[t._v("git add -p <file>")]),t._v("\t添加一些文件的更改到下一次提交")]),t._v(" "),_("p",[_("code",[t._v("git commit -a")]),t._v("\t提交跟踪文件中的所有本地更改")]),t._v(" "),_("p",[_("code",[t._v("git commit")]),t._v("\t提交以前阶段的更改")]),t._v(" "),_("p",[_("code",[t._v("git commit --amend")]),t._v("\t更改最后一次提交")]),t._v(" "),_("h2",{attrs:{id:"提交历史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交历史"}},[t._v("#")]),t._v(" 提交历史")]),t._v(" "),_("p",[_("code",[t._v("git log")]),t._v("\t显示所有提交")]),t._v(" "),_("p",[_("code",[t._v("git log -p <file>")]),t._v("\t显示特定文件随时间的变化")]),t._v(" "),_("p",[_("code",[t._v("git blame <file>")]),t._v("\t谁更改了文件的内容和时间")]),t._v(" "),_("h2",{attrs:{id:"分支与标签"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支与标签"}},[t._v("#")]),t._v(" 分支与标签")]),t._v(" "),_("p",[_("code",[t._v("git branch -av")]),t._v("\t列出所有现有分支")]),t._v(" "),_("p",[_("code",[t._v("git checkout <branch>")]),t._v("\t切换分支")]),t._v(" "),_("p",[_("code",[t._v("git branch <new-branch>")]),t._v("\t根据当前分支去创建一个新的分支")]),t._v(" "),_("p",[_("code",[t._v("git checkout --track <remote/branch>")]),t._v("\t基于远程分支创建一个新的跟踪分支")]),t._v(" "),_("p",[_("code",[t._v("git branch -d <branch>")]),t._v("\t删除分支")]),t._v(" "),_("p",[_("code",[t._v("git tag <tag-name>")]),t._v("\t用标签标记当前提交")]),t._v(" "),_("h2",{attrs:{id:"更新与发布"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#更新与发布"}},[t._v("#")]),t._v(" 更新与发布")]),t._v(" "),_("p",[_("code",[t._v("git remote -v")]),t._v("\t查看当前分支的远程管理库")]),t._v(" "),_("p",[_("code",[t._v("git remote show <remote>")]),t._v("\t查看"),_("remote",[t._v(" 的信息")])],1),t._v(" "),_("p",[_("code",[t._v("git remote add <shortname> <url>")]),t._v("\t在 "),_("url",[t._v(" 处添加一个名为 "),_("shortname",[t._v(" 的存储库")])],1)],1),t._v(" "),_("p",[_("code",[t._v("git fetch <remote>")]),t._v("\t从另一个存储库下载对象和引用")]),t._v(" "),_("p",[_("code",[t._v("git pull <remote> <branch>")]),t._v("\t从另一个存储库或本地分支获取并与其集成")]),t._v(" "),_("p",[_("code",[t._v("git push <remote> <branch>")]),t._v("\t更新远程引用以及关联的对象")]),t._v(" "),_("p",[_("code",[t._v("git push --tags")]),t._v("\t发布标签")]),t._v(" "),_("h2",{attrs:{id:"合并与回退"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#合并与回退"}},[t._v("#")]),t._v(" 合并与回退")]),t._v(" "),_("p",[_("code",[t._v("git merge <branch>")]),t._v("\t合并分支到当前分支")]),t._v(" "),_("p",[_("code",[t._v("git rebase <branch>")]),t._v("\t重新申请提交另一个分支")]),t._v(" "),_("p",[_("code",[t._v("git rebase --abort")]),t._v("\t中止 rebase 操作并将 HEAD 重置为原始分支")]),t._v(" "),_("p",[_("code",[t._v("git rebase --continue")]),t._v("\t解决了合并冲突后重新启动重新绑定过程")]),t._v(" "),_("p",[_("code",[t._v("git mergetool")]),t._v("\t使用您配置的合并工具解决冲突")]),t._v(" "),_("p",[t._v("使用编辑器手动解决冲突并在解决标记文件后解决")]),t._v(" "),_("p",[_("code",[t._v("git add <resolved-file>")])]),t._v(" "),_("p",[_("code",[t._v("git rm <resolved-file>")])]),t._v(" "),_("h2",{attrs:{id:"撤销-回滚"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销-回滚"}},[t._v("#")]),t._v(" 撤销/回滚")]),t._v(" "),_("p",[_("code",[t._v("git reset --hard HEAD")]),t._v("\t丢弃工作目录中的所有本地更改")]),t._v(" "),_("p",[_("code",[t._v("git checkout HEAD <file>")]),t._v("\t放弃特定文件中的本地更改")]),t._v(" "),_("p",[_("code",[t._v("git revert <commit>")]),t._v("\t回滚"),_("commitId",[t._v("提交")])],1),t._v(" "),_("p",[_("code",[t._v("git reset --hard <commit>")]),t._v("\t将您的HEAD指针重置为先前的提交，并丢弃此后的所有更改")]),t._v(" "),_("p",[_("code",[t._v("git reset <commit>")]),t._v("\t将您的HEAD指针重置为先前的提交，将所有更改保留为非暂存更改")]),t._v(" "),_("p",[_("code",[t._v("git reset --keep <commit>")]),t._v("\t将您的HEAD指针重置为先前的提交，保留未提交的本地更改")])])}),[],!1,null,null,null);v.default=a.exports}}]);